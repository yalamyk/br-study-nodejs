MySQL
 - 많은 웹 앱이 다양한 주체(관공서 뿐만 아니라 개인)에서 만들게 됨, 높은 신뢰성 까지는 필요x --> 많이 사용되게 됨
 - apach, mysql, php ==> amp
 - sun(java개발 회사) 인수 -> sun이 oracle에 인수 -> mysql 만든분 oracle 정책에 반발, mariadb만듬(완전한 오픈소스임)
 - db를 mariadb로 교체하면 소스코드 교체 없이 바로 mariadb로 교체 가능(반대도 가능)
 +) Amazon Aurora ==> mysql과 호환됨(database설계에 초점을 맞추기 위한 이유라고 한다.)
 +) 많은 db들이 mysql과 호환된다. 어떤 표준으로 넘어가는 단계가 아닌가하는 관점에서도 볼 수 있다. 

MYSQL 구조
- table(topic) < database(o2) < database server(opentutorials.org:3306) : 
 - 사용자 접근 순서는 반대이다. datavase server 에서 인증을 하고 넘어간다.

 MYSQL 사용
 [mysql 접속 : root 사용자로 서버에 접근]
  1. mysql -uroot -p : 접속
  2. mysql -hlocalhost -uroot -p : hlocalhost는 자기 자신의 컴표터를 의미. 자기 자신의 컴퓨터에 mysql이 존재할 경우에는 이렇게 사용한다.
  3. mysql -hopentutorials.org -P3306-uroot -p : mysql이 3306번 포트를 바라보고 있다.(mysql의 기본값)
  ==== > 비밀번호까지를 입력하면 database server가 갖고 있는 인증체계에 접근하여 root 사용자로 접근한것.

  [mysql database(폴더와 같음) 추가 수정 삭제-database 서버와는 다름(소프트 웨어 자체)]
   1. create database o2 character set utf8 collate utf8_general_ci;
   2. show databases;
   3. use o2;
   4. show tables;

   <database 생성>
   5. CREATE TABLE `topic` (
	`id` int(11) NOT NULL AUTO_INCREMENT,
	  `title` varchar(100) NOT NULL,
	  `description` text NOT NULL,
	  `author` varchar(30) NOT NULL,
	  PRIMARY KEY (id)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
   6. show tables;

   <databse에 행 추가>
   7. INSERT INTO topic(title, description, author) VALUES('javascript', 'computer language for web', 'egoing');
   8. SELECT * FROM topic; ==> 전체의 행을 가져온다.
   9. INSERT INTO topic(description, title, author) VALUES('Package manager', 'NPM', 'lamy');
   10. SELECT * FROM topic;
   11. SELECT * FROM topic WHERE id=2; ==> 전체의 행중 id가 2인 행을 가져온다.

   <database에 행 수정>
   12. UPDATE topic SET title='npm' WHERE id=2;
   13. SELECT * FROM topic;
   14. UPDATE topic SET title='npm', description='Node package manager' WHERE id=2;
   15. SELECT * FROM topic;
   16.  UPDATE topic SET title="npm", description="Node package manager", author="lamy";
   17. SELECT * FROM topic;
    ====> WHERE 조건을 빼놓으면 모든 데이터를 유실해 버린다. 굉장히 조심해야 한다.

   <database에 행 삭제>
   18. DELETE FROM topic WHERE id=2;
   19. SELECT * FROM topic;
    ====> WHERE 조건을 빼놓으면 모든 데이터를 유실해 버린다. 굉장히 조심해야 한다.

 - AUTO_INCREMENT : id값을 명시적 지정하지 않으면 database가 id 값을 자동 증가(id는 식별자의 역활을 한다.)
 - ok시 시간 표시 : 처리속도가 중요, 느려지면 작업필요 


 [mysql을 javascript에서 제어하는 방법]
  1. npm install --save node-mysql : node-mysql 모듈을 설치
  2. https://github.com/mysqljs/mysql
  3. var mysql      = require('mysql');
	var connection = mysql.createConnection({
	  host     : 'localhost',
	  user     : 'root',
	  password : 'passpass',
	  database : 'o2'
	});

	connection.connect();

	connection.query('SELECT 1 + 1 AS solution', function (error, results, fields) {
	  if (error) throw error;
	  console.log('The solution is: ', results[0].solution);
	});

	connection.end();